CCEffect %{
  techniques:
  - name: opaque
    passes:
    - compute: test-cs
      pass: adaptive-vrs
}%

CCProgram test-cs %{
  precision mediump float;
  precision mediump int;
  precision highp uimage2D;
  const float width =  559;
  const float height = 419;
  const vec4 textureSize = vec4(1/width, 1/height, width, height);
  const float ix = textureSize.x;
  const float iy = textureSize.y;
  const float sensitivity = 0.02;
  const int flip = 0;
  const uint VRSTexelSize = 16;

  const uint shading_rate_image_height = uint(textureSize.w / VRSTexelSize);

  const vec2 coord_offset[11] ={vec2(0, 0),     vec2(ix, 0), 
                                vec2(0, iy),    vec2(ix, iy),
                                vec2(0, iy*2),  vec2(ix, iy*2),
                                vec2(0, iy*3),  vec2(ix, iy*3),

                                vec2(ix*2, iy), 
                                vec2(ix*2, iy*3),
                                vec2(ix, iy*4)
                                };

  const float threshold_weights[4] = {0.2, 0.35, 0.55, 1};

  shared highp uint groupAvgDx[8];
  shared highp uint groupAvgDy[8];
  shared highp uint groupAvgluma[8];

  layout (local_size_x = 8, local_size_y = 8, local_size_z=1) in;

  #pragma rate final_image pass
  layout (set = 0, binding = 0) uniform sampler2D final_image;

  #pragma rate depth_image pass
  layout (set = 0, binding = 1) uniform sampler2D depth_image;

  #pragma rate shading_buffer pass
  layout (set = 0, binding = 2) buffer shading_buffer {
    uvec4 data[];
  };

  #pragma rate shading_rate pass
  layout (set = 0, binding = 3, r8ui) uniform uimage2D shading_rate;

  float ComputeLuminance(vec3 color)
  {
      return dot(color, vec3(0.299, 0.587, 0.114));
  }

  uint CalculateVRSLevelFromThreshold(uint currentLevel, float err, float threshold){
    if(currentLevel == uint(0)){
      if(err < threshold_weights[2] * threshold){
        return uint(1);
      }else{
        return uint(0);
      }
    }else if(currentLevel == uint(1)){
      if(err < threshold_weights[0] * threshold){
        return uint(2);
      }else if(err > threshold_weights[3] * threshold){
        return uint(0);
      }else{
        return uint(1);
      }
    }else if(currentLevel == uint(2)){
      if(err > threshold_weights[1] * threshold){
        return uint(1);
      }else{
        return uint(2);
      }
    }else{
      return uint(0);
    }
  }

  void main () {
    uvec2 workGroupID = uvec2(gl_WorkGroupID);
    uvec2 threadId = uvec2(gl_LocalInvocationID);

    uvec2 tile_id;
    uint tile_index;
    uvec2 thread_offset_in_tile;
    uvec2 global_tile_id;

    if(VRSTexelSize == uint(8)){
      //8x8
      tile_id = threadId >> uvec2(2, 1);
      tile_index = tile_id.y * uint(2) + tile_id.x;
      thread_offset_in_tile = threadId % uvec2(4,2);
      global_tile_id = uvec2(gl_GlobalInvocationID) >> uvec2(2, 1);
    }else{
      //16x16
      tile_id = threadId >> uvec2(3, 2);
      tile_index = tile_id.y;
      thread_offset_in_tile = threadId % uvec2(8,4);
      global_tile_id = uvec2(gl_GlobalInvocationID) >> uvec2(3, 2);
    }

    if(gl_LocalInvocationIndex < uint(8)){
      groupAvgDx[gl_LocalInvocationIndex] = uint(0);
      groupAvgDy[gl_LocalInvocationIndex] = uint(0);
      groupAvgluma[gl_LocalInvocationIndex] = uint(0);
    }

    barrier();

    vec2 tex_coord = vec2((workGroupID << uvec2(4, 5)) + (threadId << uvec2(1, 2))) * textureSize.xy;

    vec4 a;
    a.x = ComputeLuminance(texture(final_image, tex_coord + coord_offset[0]).xyz);
    a.y = ComputeLuminance(texture(final_image, tex_coord + coord_offset[1]).xyz);
    a.z = ComputeLuminance(texture(final_image, tex_coord + coord_offset[2]).xyz);
    a.w = ComputeLuminance(texture(final_image, tex_coord + coord_offset[3]).xyz);

    vec4 b;
    b.x = ComputeLuminance(texture(final_image, tex_coord + coord_offset[4]).xyz);
    b.y = ComputeLuminance(texture(final_image, tex_coord + coord_offset[5]).xyz);
    b.z = ComputeLuminance(texture(final_image, tex_coord + coord_offset[6]).xyz);
    b.w = ComputeLuminance(texture(final_image, tex_coord + coord_offset[7]).xyz);

    vec4 c;
    c.x = ComputeLuminance(texture(final_image, tex_coord + coord_offset[8]).xyz);
    c.y = ComputeLuminance(texture(final_image, tex_coord + coord_offset[9]).xyz);
    c.z = ComputeLuminance(texture(final_image, tex_coord + coord_offset[10]).xyz);

    highp vec4 dx = abs(vec4(a.y, c.x, b.y, c.y) - vec4(a.x, a.w, b.x, b.w));
    highp vec4 dy = abs(vec4(a.z, b.y, b.z, c.z) - vec4(a.x, a.w, b.x, b.w));

    vec4 sumAB = a + b;
    uint luma_sum = uint((sumAB.x + sumAB.y + sumAB.z + sumAB.w) * 255.0);

    dx = dx * dx;
    dy = dy * dy;

    highp uint sumDx = uint(dot(dx, vec4(1000000.0, 1000000.0, 1000000.0, 1000000.0)));
    highp uint sumDy = uint(dot(dy, vec4(1000000.0, 1000000.0, 1000000.0, 1000000.0)));

    atomicAdd(groupAvgDx[tile_index], sumDx);
    atomicAdd(groupAvgDy[tile_index], sumDy);
    atomicAdd(groupAvgluma[tile_index], luma_sum);

    if(thread_offset_in_tile == uvec2(0,0)){
      highp float avgDx;
      highp float avgDy;
      avgDx = 0.001 * sqrt(float(float(groupAvgDx[tile_index]) / float(VRSTexelSize * VRSTexelSize) * 2.0));
      avgDy = 0.001 * sqrt(float(float(groupAvgDy[tile_index]) / float(VRSTexelSize * VRSTexelSize) * 2.0));
      highp float avgluma = float(float(groupAvgluma[tile_index]) / float(VRSTexelSize * VRSTexelSize) / 255.0);

      float threshold = sensitivity * (avgluma + 0.15);
      uvec2 res = uvec2(0, 0);
      uint coord_y = global_tile_id.y;
      if(flip == 1){
        coord_y = shading_rate_image_height - 1u - global_tile_id.y;
      }

      uint preSR = imageLoad(shading_rate, ivec2(global_tile_id.x, int(coord_y))).x;
      res.x = (preSR & uint(0xc)) >> 2;
      res.y = preSR & uint(0x3);
      res.x = CalculateVRSLevelFromThreshold(res.x, avgDx, threshold);
      res.y = CalculateVRSLevelFromThreshold(res.y, avgDy, threshold);

      uint curSR = (res.x << 2) | res.y;
      imageStore(shading_rate, ivec2(global_tile_id.x, int(coord_y)), uvec4(curSR));
    }
  }
}%
